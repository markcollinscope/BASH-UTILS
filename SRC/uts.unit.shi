#!/bin/bash

# TODO: help function.
# TODO: consider:  tst.vbred, tst.vbgreen. flags - retionalise, or good enough. 

###
# NB:
# Search 'PUBLIC API' - to find the functions you use to write bash unit-tests.
# all the early code is set up related.
# See the '_help' function (or run this file with --help as the argument) for info
# on how to use this file to unit test scripts or functions in bash.
###

### these functions must be active even if testing is not 'active' - see cmd line flag processing shortly.
# IS TESTING MODE ACTIVE?
declare -g 	__BU_TEST_ACTIVE=1;
function tst.active() # is 'client code' testing active? i.e. test flag on cmd line.
{
	return $__BU_TEST_ACTIVE;
}

# exit this bash include file asap if not required.
readonly __BU_SRC="$0"
readonly __BU_THISFILE="${BASH_SOURCE[0]}";

function tst.exitreturn()
{
	echo "eval if test "$__BU_SRC" = "$__BU_THISFILE"; then exit "$@"; else return "$@"; fi";
}

if ! [[ "$1" = -* ]]; then
	$(tst.exitreturn 0);
fi

#_dbg()	{ echo "$(_fn): $@" >&2; }

### IMPORT FROM ENV - OR USE LOCAL DEFAULTS.
# regular expression definition - used find tests (using grep) client code needing testing.
readonly BU_REGEX=${BU_REGEX:-'^.*function.*test.*()'};

### GLOBAL CONSTS. THESE CAN BE OVERRIDEN BY CLIENT CODE WITH ENV VARS.

# self test related.
readonly BU_SELF_TEST_FLAG=${BU_SELF_TEST_FLAG:-'--self'};
readonly BU_SELF_TEST_VERBOSE_FLAG=${BU_SELF_TEST_VERBOSE_FLAG:-'--selfvb'};
readonly BU_SELF_TEST_SILENT_FLAG=${BU_SELF_TEST_SILENT_FLAG:-'--selfsilent'};

# help info.
readonly BU_HELP_FLAG=${BU_HELP_FLAG-'--help'};

# client code test activation.
readonly BU_TEST_FLAG=${BU_TEST_FLAG:-'--test'};
readonly BU_TEST_VERBOSE_FLAG=${BU_TEST_VERBOSE_FLAG:-'--testvb'};
readonly BU_TEST_SILENT_FLAG=${BU_TEST_SILENT_FLAG:-'--testsilent'};


function tst.exitif()	{ if test "$0" = "${BASH_SOURCE[0]}"; then exit $1; fi; } 
# TBB TODO DOCCO.
# TBD. THIS FN DOES NOT WORK IN ANOTHER WHERE THE OTHER IS SOURCED!

### SCRIPT GLOBAL VARS ARE PREFIXED WITH __BU
declare -g __BU_FIRST_ARG=${1-}

### START CODE ###
_fn() 			{ local level=${1:-1}; local fn="${FUNCNAME[$level]}"; echo $fn; }
_bye() 			{ _echoif "...terminating - have a wonderful day debugging!"; }

readonly __BU_HELP_INFO=$(cat <<__BU_ENDOFHELP
	todo: complete help section.
__BU_ENDOFHELP
);

_help()
{
	_blue;
	cat $__BU_HELP_INFO >&2;
	_white
	exit 0;
}

_isthisfile() { test "$__BU_SRC" = "$__BU_THISFILE"; }

# set colors of output, push color to set,and pop to return to previous...
_rmfirst() 		{ shift; echo "$@"; }
_addfirst() 	{ echo "$@"; }
_echofirst() 	{ echo $1; }
_setcolor()  	{ tput setaf $1; } 

declare -g __BU_COLSTACK=7 # white.
_pushcolor() 	{ local newcolor=$1; __BU_COLSTACK=$(_addfirst $newcolor $__BU_COLSTACK); _setcolor $newcolor; }
_popcolor()		{ __BU_COLSTACK=$(_rmfirst $__BU_COLSTACK); local previous_color=$(_echofirst $__BU_COLSTACK); _setcolor $previous_color; }

_red() 			{ _pushcolor 1; }
_white() 		{ _pushcolor 7; }
_green() 		{ _pushcolor 2; }
_yellow()		{ _pushcolor 3; }
_blue()			{ _pushcolor 4; }
_resetcol()		{ _popcolor; }

# vebose output functions.
declare -g __BU_VERBOSE=1;
_setVerbose() 		{ __BU_VERBOSE=0; tst.vb 'verbose mode on'; }
_verbose() 			{ return $__BU_VERBOSE; }

tst.vb() 				
{ 
	if _verbose; then 
		_yellow; 
		>&2  _echoif "$@"; 
		_resetcol; 
	fi 
}

# use this function for echo-ing for user output - enables the output to be switched off.
declare -g __BU_SILENT=1;
_setSilent()	{ __BU_SILENT=0; }
_silent() 		{ return $__BU_SILENT; }

_echoif()		{ if ! _silent; then echo -e "$@"; fi; }
_errif()		{ _echoif "$@" >&2; }

# self test related.
declare -g __BU_SELF_TEST=1;
_setSelfTest() 		{ __BU_SELF_TEST=0; tst.vb 'self test mode on'; }
_inSelfTestMode() 	{ return $__BU_SELF_TEST; }

# client test script related.
_setTest() 			{ __BU_TEST_ACTIVE=0; }

### OPTION PARSING ###
# PARSE FOR BASH UNIT RUNTIME OPTIONS
if test "$__BU_FIRST_ARG" = "$BU_SELF_TEST_FLAG"; then
	_setSelfTest;
	shift;
elif  test "$__BU_FIRST_ARG" = $BU_SELF_TEST_VERBOSE_FLAG; then
	_setVerbose;
	_setSelfTest;
	shift;
elif  test "$__BU_FIRST_ARG" = $BU_SELF_TEST_SILENT_FLAG; then
	_setSilent;
	_setSelfTest;
	shift;
elif  test "$__BU_FIRST_ARG" = $BU_TEST_FLAG; then
	_setTest;
	shift;
elif  test "$__BU_FIRST_ARG" = $BU_TEST_VERBOSE_FLAG; then
	_setVerbose;
	_setTest;
	shift;
elif  test "$__BU_FIRST_ARG" = $BU_TEST_SILENT_FLAG; then
	_setSilent;
	_setTest;
	shift;
elif test "$__BU_FIRST_ARG" = $BU_HELP_FLAG; then
	_errif "help:"
	_errif "-----"
	_help;
	_errif "-----"
	$(tst.exitreturn 0);
fi

# finding and running unit tests.
_callifdefined() { if test "$(type -t $1)" = "function" ; then tst.vb "calling <$@>"; "$@"; fi }

_findTests()
{
	local tests=$(grep "$BU_REGEX" $__BU_SRC | grep -v BU_REGEX | sed 's/().*//' | sed 's/function//'; );
    echo $tests
}

declare -g __BU_THIS_TEST_PASSES;

_passFailAssert()
{
	local assertion_success=$1;
	shift 1;

	__BU_ASSERT_COUNT=$((__BU_ASSERT_COUNT+1))

	if $assertion_success; then
		_green
		tst.vb "assertion passed ("$@")";
		__BU_ASSERT_PASSES=$((__BU_ASSERT_PASSES+1))
		_resetcol;
	else 
		_red
		_errif "assertion failed("$@")";
		__BU_ASSERT_FAILS=$((__BU_ASSERT_FAILS+1))
		__BU_THIS_TEST_PASSES=false;
		_resetcol;
	fi
}

###### PUBLIC API - THE FOLLOWING FUNCTIONS ARE THOSE INTENDED FOR USE BY CLIENT CODE (USERS OF THIS INCLUDED BASH FILE aka SOURCED SCRIPT)

# ASSERT TWO VALUES ($1, $2) ARE THE SAME
tst.assertSame()
{
	local val1="$1";
	local val2="$2";

	local has_passed=false;

	if test "$val1" = "$val2"; then has_passed=true; fi

	_passFailAssert $has_passed 'tst.assertSame' "<$val1>" "<$val2>"
}

# ASSERT TWO VALUES ($1, $2) ARE DIFFERENT
tst.assertDiff()
{
	local val1=$1;
	local val2=$2;

	local has_passed=false;
	if ! test "$val1" = "$val2"; then has_passed=true; fi

	_passFailAssert $has_passed 'tst.assertDiff' "$@";
}

# WRAPPER FUNCTION FOR ASSERTS - PREFERED FUNCTION TO USE.
function tst.assert() # make an assert during a test. this will be tracked. options: [--same|--diff]
{
	if test "$1" = "--same"; then
		shift;
		tst.assertSame "$@"
	
	elif test "$1" = "--diff"; then
		shift;
		tst.assertDiff "$@"
	
	else
		_errif "$__BU_SRC: no such option: $1 - testing fully aborted";
		_errif
		$(tst.exitreturn 1);
	fi
}

function tst.report() # print a report of test run results.
{
	local status_message="NB: TEST FAILURE(S) FOUND";
	local pass=false;
	
	if test "$__BU_ASSERT_FAILS" = "0"; then 
		status_message="ALL TESTS PASSED"; 
		pass=true;	
	fi

	local report="

	Test Report
	-----------
	Total assertions:              $__BU_ASSERT_COUNT
	Assertion success:             $__BU_ASSERT_PASSES
	Assertion fails:               $__BU_ASSERT_FAILS
	-----------
	Total tests:                   $__BU_TEST_COUNT
	Test passes:                   $__BU_TEST_PASSES
	Test failures:                 $__BU_TEST_FAILURES
	-----------
	"
	
	_errif "$report"

	if $pass; then _green; else _red; fi
	_errif "        ($status_message)"
	_errif
	_resetcol;
}

declare -g __BU_ASSERT_COUNT=0
declare -g __BU_ASSERT_PASSES=0
declare -g __BU_ASSERT_FAILS=0

declare -g __BU_TEST_PASSES=0;
declare -g __BU_TEST_FAILURES=0;
declare -g __BU_TEST_COUNT=0;

function tst.run() # run a set of tests.
{
	local tests_to_run=$(_findTests);

	tst.vb "tests to be run: <$tests_to_run>";
	tst.vb 
	_callifdefined tst.init
	tst.vb

	for test in $tests_to_run; do
		__BU_TEST_COUNT=$((__BU_TEST_COUNT+1));
		__BU_THIS_TEST_PASSES=true;

		tst.vb "running test function: <$test>"
		_callifdefined tst.setup
		_callifdefined $test;
		_callifdefined tst.teardown

		if $__BU_THIS_TEST_PASSES; then
			_green
			_errif "$test: test passed";
			_white
			__BU_TEST_PASSES=$((__BU_TEST_PASSES+1));
		else
			_red
			_errif "$test: test failed";
			_white
			__BU_TEST_FAILURES=$((__BU_TEST_FAILURES+1));
		fi
		tst.vb
	done

	if ! _inSelfTestMode; then tst.report; fi
}

function tst()
{
	local op=$1;
	
	# create delegate fn name.
	local fn_delegate=$(_fn)\.$op;

	if test "$(type -t $fn_delegate)" = "function"; then
		shift;
		# tst.vb "$(_fn): about to delagate and call <$_fn_delegate $@>";
		$fn_delegate "$@";
	else
		_errif "$(_fn): no function called <$fn_delegate> exists $(_bye)";
		$(tst.exitreturn 1);
	fi
}

if _inSelfTestMode && _isthisfile; then

	# self test in bash 'strict' mode.
	set -u;

	# "Mock set up and tear down to check they are running correctly"
	function tst.init() 		{ tst.assert --same 1 1; }
	function tst.setup() 		{ tst.assert --diff 222 999; }
	function tst.teardown() 	{ tst.assert --same 100 100; }

	function self_test_mock_1()		{ tst.assert --same "1" "1"; tst.assert --diff "1" "0"; }
	function self_test_mock_2()		{ tst.assert --same "1" "0"; tst.vb "nb: this is expected to fail!"; tst.assert --diff "0" "0"; tst.vb "nb: this is expected to fail!"; }

	declare -g __BU_SELF_TEST_OK=true;

	_chkResult()
	{
		if ! test "$1" = "$2"; then 
			tst.vb "SELF TEST FAILED [<$1> vs <$2>] [SELF-TEST EXPECTS THE TWO VALUES TO BE THE SAME]";
			__BU_SELF_TEST_OK=false; 
		fi
	}

	_doSelfTest()
	{
		tst.run
		tst.report

		_chkResult $__BU_TEST_COUNT 	2;
		_chkResult $__BU_TEST_PASSES 	1;
		_chkResult $__BU_TEST_FAILURES 	1;
		_chkResult $__BU_ASSERT_PASSES 	7;
		_chkResult $__BU_ASSERT_FAILS 	2;

		if $__BU_SELF_TEST_OK; then
			_green
			_echoif
			_echoif "nb: it is expected that some tests reported above will fail - it is part of the self-test process"
			_echoif "self test passed"
			_echoif "self test passed"
			_resetcol;
			_echoif "self test passed"
			_echoif
			$(tst.exitreturn 0);
		else
			_echoif
			_red;
			_echoif "self test FAILED - as for your money back!";
			_resetcol;
			_echoif "self test FAILED";
			$(tst.exitreturn 1);
		fi
	}
	_doSelfTest;
fi
