# Wisdom Of Bash ...

# true / false / 0 / 1

0/1 ###

* if 0; then ... if 1; then ... ERROR

* 	VAR=0/1;
	if $VAR; then ... ERROR

*	fn() { return 0/1; }
	if fn; then ... OK


true/false

* if true/false; then ... OK
Q: this that fn eval, or built in bash special?

* fn() { return true/false; } ... ERROR
* fn() { return $(true)/$(false) ... OK
TBC: true/false are functions. $(true) and $(false) forces eval of fns. return codes are 0/1. the are then.


TBD: CONFIRM:

######
fn() { return $(true); }

fn && echo true
# true. expected.

fn || echo false
# nothing. expected.

###
fn() { return $(false); }

fn && echo true
# nothing. expected.

fn || echo false
# false. expected.

fn; echo $?
# 1. expected.

######
TBC: fn() { return $(false); }
test fn
echo $?
0 
TBC: so fn is not eval'd test xxx just tests if there's anything after the test statement. 


