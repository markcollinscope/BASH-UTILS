INLN - inline fns - working examples of simple approach.

Conclusions:
inln - works fine for simple eval when $('d). 
inln.set - set $@ to values in array <arg1>
inln.args - or as named - can deal with pass all args easily. inln -a? inln.args? inlnall

inln.yield = return some string (likely bash) with a process specific tag that inln <raw> removes, before eval'ing.

io.out
io.err
vb
vb always - always show this in any --vb option. --vbfn '<fn> <fn> ...'
<fn> <fn> ... as one arg is an example of a many-val option.

mv:--vbfn

FunctionStructure:
Say we have
fn() - which does a nice thing - normal fn.

so:
$(inln.args fn) - call fn with all args.

notuseful:
$(inln fn) - just calls fn.

perhaps:
$(inln.fn fn) - inline the fn code?


inln() { echo eval "$@"; }
inln ls
=> eval ls
-- works.

$(inln ls)
=> does ls.
-- works.

inln.args() { inln "$@" \"\$@\"; }
=> eval echo a b c d "$@"
--works.

$(inln.args echo a b c d)
a b c d
-- works.
