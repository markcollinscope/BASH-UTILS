#!/bin/bash

# Uts 'global' include file. all uts (constituant) files include/source this file at the start.
#
# Provides mechanisms to avoid multiple inclusion/source-ing/.-ing - of itself / other uts files:
#	- see <uts.isfn uts.source && ... > below.
#	- see <uts.return_if_read()>
#
# Provides function to 'include/source' other files:
# 	- see <uts.source()>
#
# See also <uts.exitreturn> - useful if a file can be run directly or included/sourced.

# We all have to debug... sadly!
dbg() { >&2 printf "$@"; }

# Enable exit/return from this file. from either: 
# - if this file is the main controllling script (i.e. $0)		  - do: exit
# - if this file is sourced in another script (i.e it is not $0)  - do: return
# nb: bash forbids return from the main running script.
function uts.exitreturn() { printf 'eval if test $0 = ${BASH_SOURCE[0]}; then exit; else return; fi'; }

# Is it a bird? Is it a plane? Or is <$1> a bash function name?
function uts.isfn() { test "$(type -t $1)" = "function"; }

### return/exit if *this* file has already been sourced ###
uts.isfn uts_source && $(uts.exitreturn);

# has <file> ($1) already been read - avoid multiple inclusions of same file with 'source' or '.' directive.
function uts.sourced()
{
	local file=$1;
	if test -z $file; then >&2 printf "no argument supplied to uts.sourced - bye!"; exit 1; fi

	name=$(basename $file);
	name=$(sed 's/\./_/g' <<< $name);
	name=___$name;

	# is $name already declared, or not?
	if ! declare -p $name &>/dev/null; then 
		# no, so declare it for 'next time'
		declare -g $name='file has already been read';
		return 1;
	fi
	# it has already been declared, so <file> has been read already.
	return 0;
}

# has the file *in which this function is called* already been sourced? to avoid multiple sourcing/inclusion.
function uts.return_if_read() { printf 'eval uts.sourced ${BASH_SOURCE[0]} && $(uts.exitreturn)'; }

# preferred method to 'source' a file - for later extension. metadata collection. tbc/tbd.
function uts.source() { for i in "$@"; do source $i; done; }
