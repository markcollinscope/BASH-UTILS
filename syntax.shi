#!/bin/bash

out()
{
	printf "$@";
}

outln()
{
	out "$@\n";
}

assert()
{
	&>/dev/null eval "$@"
	local res=$?
	outln assert1:$res;
	! test $res = 0 && abort "assertion error: <$@">;
}

bool()
{
	assert test $# = 1
	test $1 = 0 && out true;
	out false;
}

assert test a = b;

exit;

null()
{
	test -z "$@";
}

assert test 0 
null "" && outln "works";
assert ! null hello
exit;

not()
{
	eval "$@";
	test $? && return 1;
	return 0;
}

count()
{
	local xnum=$(not null $1);
	shift;
	local anum=$#;

	assert test $xnum = $anum;
}

fn()
{
	assert test $# = 1;
	local fn=$(not null $1)
	test -t $fn
}

msg()
{
	local msgtag=$(not null $1);
	shift;
	printf "$@";
}


errorprefix()
{
	out	"error:";
}

err()
{
	>&2 printf "$(error.prefix): $@";
}

abort()
{
	message="$@"
	err $msg;
}

firstopts()
{
	for i in "$@"; do
	if test "$1" = "--
	

word()
{

	local args="$@";
}

pattern()
{
	match="$1";
	fromvalue=$"$2";
	tovalue="$3"
}


token()
{
	
}
